
import Lib
import Test.Hspec
import Test.QuickCheck
import Day22Grid
import Data.Bifunctor

import qualified Data.Map as Map
import Data.Map(Map, (!))

main :: IO ()
main = do
  input <- readFile "inputs/input22.txt" <&> inputToPoses
  hspec $ do
    describe "Part 1 test data" $ do
      let input = [Pos 1 (-1), Pos (-1) 0]
      let actionStream = iterate update (initState input)
      it "given example 1" $ do
        let infections = actionStream !! 7 & sInfectionEvents
        length infections `shouldBe` 5
      it "given example 2" $ do
        let infections = actionStream !! 70 & sInfectionEvents
        length infections `shouldBe` 41
      it "given example 3" $ do
        let infections = actionStream !! 10000 & sInfectionEvents
        length infections `shouldBe` 5587

    describe "Part 1 real data" $ do
      let initial = initState input
      let actionStream = iterate update initial
      it "should follow the expected path for the first 8 iterations" $ do
        take 8 actionStream & map sDude & map dudePos `shouldBe` [Pos 0 0, Pos 1 0, Pos 1 1, Pos 2 1, Pos 2 2, Pos 1 2, Pos 1 3, Pos 2 3]
      it "the first 3 iterations should cause the expected grids" $ do
        take 3 actionStream & map sInfections & map (showGrid 12 12) `shouldBe` (take 3 expectedGrids)
      it "should be at (1, 0) after one iteration" $ do
        actionStream !! 1 & sDude `shouldBe` Dude (Pos 1 0) East
      it "should be at (1, 1) after two iterations" $ do
        actionStream !! 2 & sDude `shouldBe` Dude (Pos 1 1) South
      it "should be at (2, 1) after three iterations" $ do
        actionStream !! 3 & sDude `shouldBe` Dude (Pos 2 1) East
      mapM_ (\(index, expectedGrid)
        -> it ("should match grid #" ++ show index)
              (actionStream !! index
               & sInfections
               & showGrid 12 12
               `shouldBe` expectedGrid))
             (zip [0..] expectedGrids)

    describe "Part 2 test data" $ do
      let input = [Pos 1 (-1), Pos (-1) 0]
      let actionStream = iterate update (initState input)
      it "given example 1" $ do
        let infections = actionStream !! 7 & sInfectionEvents
        length infections `shouldBe` 5
      it "given example 2" $ do
        let infections = actionStream !! 70 & sInfectionEvents
        length infections `shouldBe` 41
      it "given example 3" $ do
        let infections = actionStream !! 10000 & sInfectionEvents
        length infections `shouldBe` 5587

showGrid :: Int -> Int -> Map Pos Health -> String
showGrid xMax yMax healths
  = map (\y -> map (\x -> posToChar (Pos x y)) [(-xMax)..xMax]) [(-yMax)..yMax] & unlines
  where posToChar pos = case healths ! pos of
                          Clean -> '.'
                          Weakened -> 'W'
                          Infected -> '#'
                          Flagged -> 'F'

expectedGrids :: [String]
expectedGrids = map unlines $ [[
    "#.....##.####.#.#########",
    ".###..#..#..####.##....#.",
    "..#########...###...####.",
    ".##.#.##..#.#..#.#....###",
    "...##....###..#.#..#.###.",
    "###..#...######.####.#.#.",
    "#..###..###..###.###.##..",
    ".#.#.###.#.#...####..#...",
    "##........##.####..##...#",
    ".#.##..#.#....##.##.##..#",
    "###......#..##.####.###.#",
    "....#..###..#######.#...#",
    "#####.....#.##.#..#..####",
    ".#.###.#.###..##.#..####.",
    "..#..##.###...#######....",
    ".#.##.#.#.#.#...###.#.#..",
    "##.###.#.#.###.#......#..",
    "###..##.#...#....#..####.",
    ".#.#.....#..#....##..#..#",
    "#####.#.##..#...##..#....",
    "##..#.#.#.####.#.##...##.",
    "..#..#.#.####...#........",
    "###.###.##.#..#.##.....#.",
    ".##..##.##...#..#..#.#..#",
    "#...####.#.##...#..#.#.##"],

    ["#.....##.####.#.#########",
    ".###..#..#..####.##....#.",
    "..#########...###...####.",
    ".##.#.##..#.#..#.#....###",
    "...##....###..#.#..#.###.",
    "###..#...######.####.#.#.",
    "#..###..###..###.###.##..",
    ".#.#.###.#.#...####..#...",
    "##........##.####..##...#",
    ".#.##..#.#....##.##.##..#",
    "###......#..##.####.###.#",
    "....#..###..#######.#...#",
    "#####.....#..#.#..#..####",
    ".#.###.#.###..##.#..####.",
    "..#..##.###...#######....",
    ".#.##.#.#.#.#...###.#.#..",
    "##.###.#.#.###.#......#..",
    "###..##.#...#....#..####.",
    ".#.#.....#..#....##..#..#",
    "#####.#.##..#...##..#....",
    "##..#.#.#.####.#.##...##.",
    "..#..#.#.####...#........",
    "###.###.##.#..#.##.....#.",
    ".##..##.##...#..#..#.#..#",
    "#...####.#.##...#..#.#.##"],

    ["#.....##.####.#.#########",
    ".###..#..#..####.##....#.",
    "..#########...###...####.",
    ".##.#.##..#.#..#.#....###",
    "...##....###..#.#..#.###.",
    "###..#...######.####.#.#.",
    "#..###..###..###.###.##..",
    ".#.#.###.#.#...####..#...",
    "##........##.####..##...#",
    ".#.##..#.#....##.##.##..#",
    "###......#..##.####.###.#",
    "....#..###..#######.#...#",
    "#####.....#....#..#..####",
    ".#.###.#.###..##.#..####.",
    "..#..##.###...#######....",
    ".#.##.#.#.#.#...###.#.#..",
    "##.###.#.#.###.#......#..",
    "###..##.#...#....#..####.",
    ".#.#.....#..#....##..#..#",
    "#####.#.##..#...##..#....",
    "##..#.#.#.####.#.##...##.",
    "..#..#.#.####...#........",
    "###.###.##.#..#.##.....#.",
    ".##..##.##...#..#..#.#..#",
    "#...####.#.##...#..#.#.##"],

    ["#.....##.####.#.#########",
    ".###..#..#..####.##....#.",
    "..#########...###...####.",
    ".##.#.##..#.#..#.#....###",
    "...##....###..#.#..#.###.",
    "###..#...######.####.#.#.",
    "#..###..###..###.###.##..",
    ".#.#.###.#.#...####..#...",
    "##........##.####..##...#",
    ".#.##..#.#....##.##.##..#",
    "###......#..##.####.###.#",
    "....#..###..#######.#...#",
    "#####.....#....#..#..####",
    ".#.###.#.###.###.#..####.",
    "..#..##.###...#######....",
    ".#.##.#.#.#.#...###.#.#..",
    "##.###.#.#.###.#......#..",
    "###..##.#...#....#..####.",
    ".#.#.....#..#....##..#..#",
    "#####.#.##..#...##..#....",
    "##..#.#.#.####.#.##...##.",
    "..#..#.#.####...#........",
    "###.###.##.#..#.##.....#.",
    ".##..##.##...#..#..#.#..#",
    "#...####.#.##...#..#.#.##"],

    ["#.....##.####.#.#########",
    ".###..#..#..####.##....#.",
    "..#########...###...####.",
    ".##.#.##..#.#..#.#....###",
    "...##....###..#.#..#.###.",
    "###..#...######.####.#.#.",
    "#..###..###..###.###.##..",
    ".#.#.###.#.#...####..#...",
    "##........##.####..##...#",
    ".#.##..#.#....##.##.##..#",
    "###......#..##.####.###.#",
    "....#..###..#######.#...#",
    "#####.....#....#..#..####",
    ".#.###.#.###.#.#.#..####.",
    "..#..##.###...#######....",
    ".#.##.#.#.#.#...###.#.#..",
    "##.###.#.#.###.#......#..",
    "###..##.#...#....#..####.",
    ".#.#.....#..#....##..#..#",
    "#####.#.##..#...##..#....",
    "##..#.#.#.####.#.##...##.",
    "..#..#.#.####...#........",
    "###.###.##.#..#.##.....#.",
    ".##..##.##...#..#..#.#..#",
    "#...####.#.##...#..#.#.##"]]

{-
#.....##.####.#.#########
.###..#..#..####.##....#.
..#########...###...####.
.##.#.##..#.#..#.#....###
...##....###..#.#..#.###.
###..#...######.####.#.#.
#..###..###..###.###.##..
.#.#.###.#.#...####..#...
##........##.####..##...#
.#.##..#.#....##.##.##..#
###......#..##.####.###.#
....#..###..#######.#...#

#####.....#./#.#..#..####

.#.###.#.###..##.#..####.
..#..##.###...#######....
.#.##.#.#.#.#...###.#.#..
##.###.#.#.###.#......#..
###..##.#...#....#..####.
.#.#.....#..#....##..#..#
#####.#.##..#...##..#....
##..#.#.#.####.#.##...##.
..#..#.#.####...#........
###.###.##.#..#.##.....#.
.##..##.##...#..#..#.#..#
#...####.#.##...#..#.#.##
-}
